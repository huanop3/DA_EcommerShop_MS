using Microsoft.AspNetCore.SignalR;
using System;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Collections.Concurrent;
using Microsoft.AspNetCore.Authorization;

namespace MainEcommerceService.Hubs
{
    public class NotificationHub : Hub
    {
        private readonly ILogger<NotificationHub> _logger;
        private static readonly ConcurrentDictionary<string, string> _userConnections = new ConcurrentDictionary<string, string>();

        public NotificationHub(ILogger<NotificationHub> logger)
        {
            _logger = logger;
        }

        // Ph∆∞∆°ng th·ª©c chung ƒë·ªÉ g·ª≠i th√¥ng b√°o
        public async Task SendMessage(string user, string message)
        {
            _logger.LogInformation($"G·ª≠i tin nh·∫Øn t·ª´ {user}: {message}");
            await Clients.All.SendAsync("ReceiveMessage", user, message);
        }

        #region User Management Operations

        public async Task NotifyUserCreated(string name)
        {
            _logger.LogInformation($"G·ª≠i th√¥ng b√°o t·∫°o ng∆∞·ªùi d√πng m·ªõi: {name}");
            await Clients.All.SendAsync("UserCreated", name);
        }

        public async Task NotifyUserUpdated(int userId, string name)
        {
            _logger.LogInformation($"G·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng: {userId} - {name}");
            await Clients.All.SendAsync("UserUpdated", userId, name);
        }

        public async Task NotifyUserDeleted(int userId)
        {
            _logger.LogInformation($"G·ª≠i th√¥ng b√°o x√≥a ng∆∞·ªùi d√πng: {userId}");
            await Clients.All.SendAsync("UserDeleted", userId);
        }

        // üî• TH√äM methods n√†y v√†o NotificationHub

        /// <summary>
        /// Th√¥ng b√°o khi user role ƒë∆∞·ª£c c·∫≠p nh·∫≠t
        /// </summary>
        public async Task NotifyUserRoleUpdated(int userId, string username, string newRole)
        {
            _logger.LogInformation($"G·ª≠i th√¥ng b√°o user role updated: User {userId} ({username}) -> {newRole}");

            // G·ª≠i t·ªõi t·∫•t c·∫£ clients
            await Clients.All.SendAsync("UserUpdated", userId, username);

            // G·ª≠i th√¥ng b√°o chi ti·∫øt cho admin
            await Clients.Groups("AdminGroup").SendAsync("UserRoleChanged", userId, username, newRole);

            // G·ª≠i th√¥ng b√°o ri√™ng cho user ƒë√≥
            await Clients.Group($"User_{userId}").SendAsync("YourRoleUpdated", newRole, $"Your role has been updated to {newRole}!");
        }

        /// <summary>
        /// Th√¥ng b√°o khi user status thay ƒë·ªïi
        /// </summary>
        public async Task NotifyUserStatusChanged(int userId, string status)
        {
            _logger.LogInformation($"G·ª≠i th√¥ng b√°o user status changed: User {userId} -> {status}");
            await Clients.All.SendAsync("UserStatusChanged", userId, status);

            // G·ª≠i t·ªõi t·∫•t c·∫£ admin clients
            await Clients.Groups("AdminGroup").SendAsync("UserStatusChanged", userId, status);

            // G·ª≠i th√¥ng b√°o cho user ƒë√≥
            var message = status == "Active" ? "Your account has been activated" : "Your account has been deactivated";
            await Clients.Group($"User_{userId}").SendAsync("YourStatusChanged", status, message);
        }
        #endregion

        #region Category Management Operations

        public async Task NotifyCategoryCreated(string categoryName)
        {
            _logger.LogInformation($"G·ª≠i th√¥ng b√°o t·∫°o category m·ªõi: {categoryName}");
            await Clients.All.SendAsync("CategoryCreated", categoryName);
        }

        public async Task NotifyCategoryUpdated(int categoryId, string categoryName)
        {
            _logger.LogInformation($"G·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t category: {categoryId} - {categoryName}");
            await Clients.All.SendAsync("CategoryUpdated", categoryId, categoryName);
        }

        public async Task NotifyCategoryDeleted(int categoryId)
        {
            _logger.LogInformation($"G·ª≠i th√¥ng b√°o x√≥a category: {categoryId}");
            await Clients.All.SendAsync("CategoryDeleted", categoryId);
        }

        #endregion

        #region Coupon Management Operations

        public async Task NotifyCouponCreated(string couponCode)
        {
            _logger.LogInformation($"G·ª≠i th√¥ng b√°o t·∫°o coupon m·ªõi: {couponCode}");
            await Clients.All.SendAsync("CouponCreated", couponCode);
        }

        public async Task NotifyCouponUpdated(int couponId, string couponCode)
        {
            _logger.LogInformation($"G·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t coupon: {couponId} - {couponCode}");
            await Clients.All.SendAsync("CouponUpdated", couponId, couponCode);
        }

        public async Task NotifyCouponDeleted(int couponId)
        {
            _logger.LogInformation($"G·ª≠i th√¥ng b√°o x√≥a coupon: {couponId}");
            await Clients.All.SendAsync("CouponDeleted", couponId);
        }

        public async Task NotifyCouponStatusChanged(int couponId, string status)
        {
            _logger.LogInformation($"G·ª≠i th√¥ng b√°o thay ƒë·ªïi tr·∫°ng th√°i coupon: {couponId} - {status}");
            await Clients.All.SendAsync("CouponStatusChanged", couponId, status);
        }

        #endregion

        #region Address Management Operations

        public async Task NotifyAddressCreated(int userId, string addressInfo)
        {
            _logger.LogInformation($"G·ª≠i th√¥ng b√°o t·∫°o address m·ªõi cho user {userId}: {addressInfo}");

            // G·ª≠i t·ªõi t·∫•t c·∫£ clients
            await Clients.All.SendAsync("AddressCreated", userId, addressInfo);

            // G·ª≠i th√¥ng b√°o ri√™ng cho user ƒë√≥
            await Clients.Group($"User_{userId}").SendAsync("UserAddressCreated", addressInfo);
        }

        public async Task NotifyAddressUpdated(int userId, string addressInfo)
        {
            _logger.LogInformation($"G·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t address cho user {userId}: {addressInfo}");

            // G·ª≠i t·ªõi t·∫•t c·∫£ clients
            await Clients.All.SendAsync("AddressUpdated", userId, addressInfo);

            // G·ª≠i th√¥ng b√°o ri√™ng cho user ƒë√≥
            await Clients.Group($"User_{userId}").SendAsync("UserAddressUpdated", addressInfo);
        }

        public async Task NotifyAddressDeleted(int addressId)
        {
            _logger.LogInformation($"G·ª≠i th√¥ng b√°o x√≥a address: {addressId}");
            await Clients.All.SendAsync("AddressDeleted", addressId);
        }

        public async Task NotifyDefaultAddressChanged(int userId, int addressId)
        {
            _logger.LogInformation($"G·ª≠i th√¥ng b√°o thay ƒë·ªïi default address cho user {userId}: address {addressId}");

            // G·ª≠i t·ªõi t·∫•t c·∫£ clients
            await Clients.All.SendAsync("DefaultAddressChanged", userId, addressId);

            // G·ª≠i th√¥ng b√°o ri√™ng cho user ƒë√≥
            await Clients.Group($"User_{userId}").SendAsync("UserDefaultAddressChanged", addressId);
        }

        #endregion

        #region Seller Profile Management Operations

        /// <summary>
        /// Th√¥ng b√°o khi c√≥ seller profile m·ªõi ƒë∆∞·ª£c t·∫°o
        /// </summary>
        public async Task NotifySellerProfileCreated(string storeName)
        {
            _logger.LogInformation($"G·ª≠i th√¥ng b√°o t·∫°o seller profile m·ªõi: {storeName}");

            // G·ª≠i t·ªõi t·∫•t c·∫£ clients (ƒë·ªìng nh·∫•t v·ªõi frontend)
            await Clients.All.SendAsync("SellerProfileCreated", storeName);

            // G·ª≠i t·ªõi admin group
            await Clients.Groups("AdminGroup").SendAsync("NewSellerApplication", storeName);
        }

        /// <summary>
        /// Th√¥ng b√°o khi seller profile ƒë∆∞·ª£c c·∫≠p nh·∫≠t
        /// </summary>
        public async Task NotifySellerProfileUpdated(int sellerId, string storeName)
        {
            _logger.LogInformation($"G·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t seller profile: {sellerId} - {storeName}");

            // G·ª≠i t·ªõi t·∫•t c·∫£ clients (ƒë·ªìng nh·∫•t v·ªõi frontend)
            await Clients.All.SendAsync("SellerProfileUpdated", sellerId, storeName);

            // G·ª≠i th√¥ng b√°o ri√™ng cho seller ƒë√≥ (n·∫øu ƒëang online)
            await Clients.Group($"Seller_{sellerId}").SendAsync("YourSellerProfileUpdated", storeName);
        }

        /// <summary>
        /// Th√¥ng b√°o khi seller profile b·ªã x√≥a
        /// </summary>
        public async Task NotifySellerProfileDeleted(int sellerId)
        {
            _logger.LogInformation($"G·ª≠i th√¥ng b√°o x√≥a seller profile: {sellerId}");

            // G·ª≠i t·ªõi t·∫•t c·∫£ clients (ƒë·ªìng nh·∫•t v·ªõi frontend)
            await Clients.All.SendAsync("SellerProfileDeleted", sellerId);

            // G·ª≠i th√¥ng b√°o ri√™ng cho seller ƒë√≥ (n·∫øu ƒëang online)
            await Clients.Group($"Seller_{sellerId}").SendAsync("YourSellerProfileDeleted", "Your seller profile has been deleted by admin");
        }

        /// <summary>
        /// Th√¥ng b√°o khi seller profile ƒë∆∞·ª£c x√°c minh
        /// </summary>
        public async Task NotifySellerProfileVerified(int sellerId, string storeName)
        {
            _logger.LogInformation($"G·ª≠i th√¥ng b√°o x√°c minh seller profile: {sellerId} - {storeName}");

            // G·ª≠i t·ªõi t·∫•t c·∫£ clients (ƒë·ªìng nh·∫•t v·ªõi frontend)
            await Clients.All.SendAsync("SellerProfileVerified", sellerId, storeName);

            // G·ª≠i th√¥ng b√°o ri√™ng cho seller ƒë√≥ (n·∫øu ƒëang online)
            await Clients.Group($"Seller_{sellerId}").SendAsync("YourSellerProfileVerified", storeName, "Congratulations! Your seller profile has been verified.");

            // G·ª≠i th√¥ng b√°o cho user owner c·ªßa seller profile
            var userId = GetUserIdFromSellerId(sellerId);
            await Clients.Group($"User_{userId}").SendAsync("SellerVerificationApproved", storeName);
        }

        /// <summary>
        /// Th√¥ng b√°o khi seller profile b·ªã h·ªßy x√°c minh
        /// </summary>
        public async Task NotifySellerProfileUnverified(int sellerId, string storeName)
        {
            _logger.LogInformation($"G·ª≠i th√¥ng b√°o h·ªßy x√°c minh seller profile: {sellerId} - {storeName}");

            // G·ª≠i t·ªõi t·∫•t c·∫£ clients (ƒë·ªìng nh·∫•t v·ªõi frontend)
            await Clients.All.SendAsync("SellerProfileUnverified", sellerId, storeName);

            // G·ª≠i th√¥ng b√°o ri√™ng cho seller ƒë√≥ (n·∫øu ƒëang online)
            await Clients.Group($"Seller_{sellerId}").SendAsync("YourSellerProfileUnverified", storeName, "Your seller verification has been revoked.");

            // G·ª≠i th√¥ng b√°o cho user owner c·ªßa seller profile
            var userId = GetUserIdFromSellerId(sellerId);
            await Clients.Group($"User_{userId}").SendAsync("SellerVerificationRevoked", storeName);
        }

        #endregion

        #region User Groups Management

        // ƒêƒÉng k√Ω user-connection mapping
        public async Task RegisterUserConnection(string userId)
        {
            _userConnections[Context.ConnectionId] = userId;
            await Groups.AddToGroupAsync(Context.ConnectionId, $"User_{userId}");
            _logger.LogInformation($"User {userId} ƒë√£ ƒëƒÉng k√Ω k·∫øt n·ªëi v·ªõi ID: {Context.ConnectionId}");
        }

        // Th√™m user v√†o admin group
        [Authorize(Roles = "Admin")]
        public async Task JoinAdminGroup()
        {
            await Groups.AddToGroupAsync(Context.ConnectionId, "AdminGroup");
            _logger.LogInformation($"Admin {Context.ConnectionId} ƒë√£ join AdminGroup");
        }

        // X√≥a user kh·ªèi admin group
        [Authorize(Roles = "Admin")]
        public async Task LeaveAdminGroup()
        {
            await Groups.RemoveFromGroupAsync(Context.ConnectionId, "AdminGroup");
            _logger.LogInformation($"Admin {Context.ConnectionId} ƒë√£ leave AdminGroup");
        }

        // G·ª≠i th√¥ng b√°o ri√™ng cho t·ª´ng user
        public async Task SendPrivateNotification(string userId, string message)
        {
            _logger.LogInformation($"G·ª≠i th√¥ng b√°o ri√™ng ƒë·∫øn user {userId}: {message}");
            await Clients.Group($"User_{userId}").SendAsync("PrivateNotification", message);
        }

        // G·ª≠i th√¥ng b√°o t·ªõi t·∫•t c·∫£ admin
        [Authorize(Roles = "Admin")]
        public async Task SendAdminBroadcast(string message, string type = "info")
        {
            _logger.LogInformation($"G·ª≠i th√¥ng b√°o broadcast t·ªõi admin: {message}");
            await Clients.Groups("AdminGroup").SendAsync("AdminBroadcast", message, type);
        }

        #endregion

        #region Seller Groups Management

        /// <summary>
        /// ƒêƒÉng k√Ω seller v√†o group ƒë·ªÉ nh·∫≠n th√¥ng b√°o ri√™ng
        /// </summary>
        public async Task RegisterSellerConnection(int sellerId, int userId)
        {
            await Groups.AddToGroupAsync(Context.ConnectionId, $"Seller_{sellerId}");
            await Groups.AddToGroupAsync(Context.ConnectionId, $"User_{userId}");
            _logger.LogInformation($"Seller {sellerId} (User {userId}) ƒë√£ ƒëƒÉng k√Ω k·∫øt n·ªëi v·ªõi ID: {Context.ConnectionId}");
        }

        /// <summary>
        /// X√≥a seller kh·ªèi group
        /// </summary>
        public async Task UnregisterSellerConnection(int sellerId, int userId)
        {
            await Groups.RemoveFromGroupAsync(Context.ConnectionId, $"Seller_{sellerId}");
            await Groups.RemoveFromGroupAsync(Context.ConnectionId, $"User_{userId}");
            _logger.LogInformation($"Seller {sellerId} (User {userId}) ƒë√£ h·ªßy ƒëƒÉng k√Ω k·∫øt n·ªëi");
        }

        /// <summary>
        /// G·ª≠i th√¥ng b√°o ri√™ng cho m·ªôt seller
        /// </summary>
        [Authorize(Roles = "Admin")]
        public async Task SendPrivateSellerNotification(int sellerId, string message, string type = "info")
        {
            _logger.LogInformation($"G·ª≠i th√¥ng b√°o ri√™ng ƒë·∫øn seller {sellerId}: {message}");
            await Clients.Group($"Seller_{sellerId}").SendAsync("PrivateSellerNotification", message, type);
        }

        /// <summary>
        /// G·ª≠i th√¥ng b√°o broadcast cho t·∫•t c·∫£ sellers
        /// </summary>
        [Authorize(Roles = "Admin")]
        public async Task SendSellerBroadcast(string message, string type = "info")
        {
            _logger.LogInformation($"G·ª≠i th√¥ng b√°o broadcast t·ªõi t·∫•t c·∫£ sellers: {message}");

            // G·ª≠i t·ªõi t·∫•t c·∫£ verified sellers
            await Clients.Groups("VerifiedSellers").SendAsync("SellerBroadcast", message, type);
        }

        #endregion

        #region Connection Management

        public override async Task OnConnectedAsync()
        {
            _logger.LogInformation($"Client k·∫øt n·ªëi: {Context.ConnectionId}");

            // Ki·ªÉm tra n·∫øu l√† admin th√¨ t·ª± ƒë·ªông join AdminGroup
            if (Context.User?.IsInRole("Admin") == true)
            {
                await Groups.AddToGroupAsync(Context.ConnectionId, "AdminGroup");
                _logger.LogInformation($"Admin {Context.ConnectionId} ƒë√£ t·ª± ƒë·ªông join AdminGroup");
            }

            // Ki·ªÉm tra n·∫øu l√† seller th√¨ join VerifiedSellers group
            if (Context.User?.IsInRole("Seller") == true)
            {
                await Groups.AddToGroupAsync(Context.ConnectionId, "VerifiedSellers");
                _logger.LogInformation($"Seller {Context.ConnectionId} ƒë√£ t·ª± ƒë·ªông join VerifiedSellers");
            }

            // G·ª≠i th√¥ng b√°o user connected (ƒë·ªìng nh·∫•t v·ªõi frontend)
            await Clients.All.SendAsync("UserConnected", Context.ConnectionId);
            await base.OnConnectedAsync();
        }

        public override async Task OnDisconnectedAsync(Exception exception)
        {
            _logger.LogInformation($"Client ng·∫Øt k·∫øt n·ªëi: {Context.ConnectionId}");

            // X√≥a mapping khi user ng·∫Øt k·∫øt n·ªëi
            if (_userConnections.TryRemove(Context.ConnectionId, out string userId))
            {
                await Groups.RemoveFromGroupAsync(Context.ConnectionId, $"User_{userId}");
                _logger.LogInformation($"ƒê√£ x√≥a user {userId} kh·ªèi nh√≥m User_{userId}");
            }

            // X√≥a kh·ªèi AdminGroup n·∫øu l√† admin
            if (Context.User?.IsInRole("Admin") == true)
            {
                await Groups.RemoveFromGroupAsync(Context.ConnectionId, "AdminGroup");
                _logger.LogInformation($"Admin {Context.ConnectionId} ƒë√£ r·ªùi AdminGroup");
            }

            // X√≥a kh·ªèi VerifiedSellers n·∫øu l√† seller
            if (Context.User?.IsInRole("Seller") == true)
            {
                await Groups.RemoveFromGroupAsync(Context.ConnectionId, "VerifiedSellers");
                _logger.LogInformation($"Seller {Context.ConnectionId} ƒë√£ r·ªùi VerifiedSellers");
            }

            // G·ª≠i th√¥ng b√°o user disconnected (ƒë·ªìng nh·∫•t v·ªõi frontend)
            await Clients.All.SendAsync("UserDisconnected", Context.ConnectionId);
            await base.OnDisconnectedAsync(exception);
        }

        #endregion

        #region Health Check & Utilities

        public async Task Ping()
        {
            await Clients.Caller.SendAsync("Pong", DateTime.UtcNow);
        }

        [Authorize(Roles = "Admin")]
        public async Task GetConnectedUsersCount()
        {
            var count = _userConnections.Count;
            await Clients.Caller.SendAsync("ConnectedUsersCount", count);
        }

        #endregion

        #region Helper Methods

        /// <summary>
        /// Helper method ƒë·ªÉ l·∫•y UserId t·ª´ SellerId
        /// </summary>
        private string GetUserIdFromSellerId(int sellerId)
        {
            // TODO: Implement logic to get UserId from SellerId
            // C√≥ th·ªÉ inject SellerProfileService ho·∫∑c d√πng database query
            return sellerId.ToString(); // Placeholder for now
        }

        #endregion
    }
}